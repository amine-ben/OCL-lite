grammar fr.inria.diverse.OCLlite with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate oCLlite "http://www.inria.fr/diverse/OCLlite"

/*
 * *********************************************
 * 						Header
 * *********************************************
 */
Module returns Module:
	{Module}
	'module' name=ID
	
		'@@source' source=OclLModel
		'@@input' input=OclLModel
 		( imports+=Import ( imports+=Import)*)?
		( elements+=ModuleElement (elements+=ModuleElement)*)?
	;

OclLModel returns OclLModel :
	name=ID
	(uri=URI_)?
;

URI_ returns URI_:
	'uri='scheme=SCHEME'://' // Scheme
	authority=AUTHORITY'/' // 
	fragment_=FRAGMENT	// 
;

FRAGMENT:
	ID('/'ID)*
;

AUTHORITY:
	ID('.'ID)*(':'INT)? //TODO limit the number of characters 
;

terminal SCHEME:
	'http'|'file'|'platform'|'neoemfhbase'
;

Import returns Import:
	{Import}
	'imports'
	name=ID;

ModuleElement returns ModuleElement:
	Query // TODO extend this with additional moduleElements
;

Query returns Query:
	{Query}
	'query' name=ID ':' body=OclLExpression';'
;

/**
 * ********************************************
 * 					Operators
 * *******************************************
 */
	 
UnaryOperator:
	'-' | 'not' // 
;
MultiOperator :
		'*' | '/' // multiplication
;
AdditionOperator :
	 '+' | '-' // Addition
;
ComparisonOperator : 
	 '>' | '<' | '>=' | '<='//comparison
;
EqualityOperator : 
	 '=' | '<>' // Equality
;

AndOperator : 
	'and' 
;
OrOperator : 
	'or'
;
XorOperator :
	'xor'
;
ImpliesOperator : 
	'implies'
;

BooleanOperator:
	XorOperator | OrOperator | AndOperator | ImpliesOperator // Boolean
;
NavigationOperator:
	'.' | '->' 
;
 
 CollectionOpID returns ecore::EString :
	'size'
	| 'includes'
	| 'excludes'
	| 'count'
	| 'includesAll'
	| 'excludesAll'
	| 'isEmpty'
	| 'notEmpty'
	| 'sum'
	| 'asBag'
	| 'asSet'
	| 'asSequence'
	| 'union'
	| 'flatten'
	| 'append'
	| 'prepend'
	| 'insertAt'
	| 'subSequence'
	| 'at'
	| 'indexOf'
	| 'first'
	| 'last'
	| 'including'
	| 'excluding'	
;
 
 
IterativeOperationID returns ecore::EString:
	'exists'
	| 'forAll'
	| 'isUnique'
	| 'any'
	| 'one'
	| 'collect'
	| 'select'
	| 'reject'	
;

/**
 * ********************************************
 * 					Expressions
 * ********************************************
 * 
 * Using the delegate pattern to respect rule precedence
 */
 
 
OclLExpression returns OclLExpression:
	ImpliesOpExp
	| LetExp 
	| UnaryOpExp
;



LetExp returns OclLExpression :
	name='let' variable=LocalVariable 'in' in=OclLExpression;
	
UnaryOpExp returns OclLExpression:
	name=UnaryOperator target=OclLExpression		
;

ImpliesOpExp returns OclLExpression:
	XorOpExp ({BoolOpCallExp.source=current} name=ImpliesOperator target=XorOpExp)*
;

XorOpExp returns OclLExpression:
	OrOpExp ({BoolOpCallExp.source=current} name=XorOperator target=OrOpExp)*
;

OrOpExp returns OclLExpression:
	AndOpExp ({BoolOpCallExp.source=current} name=OrOperator target=AndOpExp)*
;

AndOpExp returns OclLExpression:
	EqOpExp ({BoolOpCallExp.source=current} name=AndOperator target=EqOpExp)*
;

EqOpExp returns OclLExpression :
	ComparisonOpExp ({EqOpCallExp.source=current} name=('<>'|'=') target=ComparisonOpExp)*
;

ComparisonOpExp returns OclLExpression:
	AdditionOpExp ({ComOpCallExp.source=current} name=('>' | '<' | '>=' | '<=') target=AdditionOpExp)*
;

AdditionOpExp returns OclLExpression : 
	MultiOpExp ({AddOpCallExp.source=current} name=('+'|'-') target=MultiOpExp)*
;

MultiOpExp returns OclLExpression : 
	NavOpExp ({MulOpCallExp.source=current} name=('*'|'/') target=NavOpExp)*
;

NavOpExp returns OclLExpression:
	NavigationOpCallExp (({NavigationExp.source=current} name=NavigationOperator target=NavigationOpCallExp)*)? 
;


NavigationOpCallExp returns OclLExpression :
	OperationCall
	| NavigationOrAttributeCall
	| IterateExp
	| IteratorExp
	| CollectionOpCall
	|PrimaryExp
;



CollectionOpCall returns OclLExpression:
	{CollectionOpCallExp} name=CollectionOpID '(' (arguments+=OclLExpression ("," arguments+=OclLExpression)*)? ')'
;


IterateExp returns OclLExpression:
	{IterateExp}name='iterate' '(' iterators+=Iterator  (','iterators+=Iterator)* ';'result=LocalVariable '|' body=OclLExpression')'
;

Iterator:
	name=ID (':' type=OclLType)?
; 

IteratorExp returns OclLExpression:
	{IteratorExp} name=IterativeOperationID '(' iterators+=Iterator  (','iterators+=Iterator)*  '|' body=OclLExpression')'	
;


NavigationOrAttributeCall returns OclLExpression:
	{NavigationOrAttributeCall}feature=ID 
;

OperationCall returns OclLExpression:
	{OperationCall} name=ID '(' (arguments+=OclLExpression ("," arguments+=OclLExpression)*)? ')'
;

OclLModelElementExp returns OclLExpression: 
		model=OclLModel name='::' elements+=ID ('::'elements+=ID)* (target=AllInstancesOpCall)?
;

AllInstancesOpCall returns OclLExpression :
	{OperationCall} '.' name='allInstances' '(' ')' 
	;

LocalVariable returns LocalVariable :
	name=ID ':' type=OclLType '=' initExp=OclLExpression
;

PrimaryExp returns OclLExpression:
	SeflExp
	| NestedExp	
 	| IfExp
	| PrimitiveExp
	| TupleExp
	| LambdaExp
	| OclLModelElementExp
	| MapExp
	| CollectionExp
;

LambdaExp returns OclLExpression : 
	{LambdaExp}name='Lambda' '{' expression=OclLExpression '}'
;

CollectionExp returns CollectionExp:
	  BagExp 
	  |SequenceExp 
	  | SetExp 
	  | OrderedSetExp 
;

BagExp returns BagExp:
	{BagExp} 'Bag'  '{' parts+=OclLExpression (',' parts+=OclLExpression)'}'
;

//CollectionRange returns CollectionRange:
//	first=OclLExpression '..' last=OclLExpression
//;


SequenceExp returns SequenceExp : 
	{SequenceExp} name='Sequence' '{' parts+=OclLExpression (','parts+=OclLExpression)'}'
;

SetExp returns SetExp : 
	{SetExp} name='Set' '{' parts+=OclLExpression (','parts+=OclLExpression)'}'
;

OrderedSetExp returns OrderedSetExp : 
	{OrderedSetExp} name='OrderedSet' '{' parts+=OclLExpression (','parts+=OclLExpression)'}'
;

MapExp returns MapExp :
	{MapExp} name='Map' '{' mapElements+=MapElement (',' mapElements+=MapElement)* '}'
;

MapElement returns MapElement:
	'(' key=OclLExpression ';' value=OclLExpression ')'
;

//BooleanOpExp returns OclLExpression:
//	PrimaryOclLExpression ({BoolOpCallExp.source=current} name=('and' | 'or' | 'xor' | 'implies') target=PrimaryOclLExpression)*
//;
//
//PrimaryOclLExpression returns OclLExpression:
//	 PrimaryExp 
//;
TupleExp returns OclLExpression:
	{TupleExp}name='Tuple' '{' parts+=TuplePart (',' parts+=TuplePart)* '}'
;

TuplePart returns TuplePart:
	name=STRING (':' type=OclLType)? '=' init=OclLExpression
;

PrimitiveExp returns PrimitiveExp:
	NumberExp
	| StringExp
	| BooleanExp
	| UnlimitedNaturalExp
	| InvalidExp
	| NullExp
;

NumberExp returns NumberLiteralExp:
	symbol=INT
;

StringExp returns StringLiteralExp:
	segments+= STRING+
;

BooleanExp returns BooleanLiteralExp:
	symbol='true'
	| symbol='false'
;

UnlimitedNaturalExp returns UnlimitedNaturalLiteralExp:
	{UnlimitedNaturalLiteralExp} '*';

InvalidExp returns InvalidLiteralExp:
	{InvalidLiteralExp} 'invalid';

NullExp returns NullLiteralExp:
	{NullLiteralExp} 'null';

IfExp returns IfExp:
	name='if' condition=OclLExpression
	'then' then=OclLExpression
	(ifThen+=ElseIfThenExp)*
	'else' else=OclLExpression
	'endif';

ElseIfThenExp returns OclLExpression:
	({ElseIfThenExp}name='elseif' condition=OclLExpression
	'then' then=OclLExpression)
;

SeflExp returns OclLExpression:
	{SelfExp} name='self'
;

NestedExp returns OclLExpression:
	({NestedExp}'('exp=OclLExpression')')
;

OclLType returns OclLType:
	 StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclLAnyType | TupleType | OclLModelElement | MapType | LambdaType | EnvType;

OclLModelElement returns OclLModelElementExp:
	model=OclLModel'::'name=ID // Might lead the grammar into unambiguous state
;

EnvType returns EnvType:
	name='Env'	// using the Env variable for indices/
;

LambdaType returns LambdaType:
	name='Lambda' '('argsTypes+=OclLType (','argsTypes+=OclLType)*')' ':' returnType=OclLType
;

MapType returns MapType:
	name='Map''('keyType=OclLType ',' valueType=OclLType')'
;

TupleType returns TupleType:
	'TupleType'	
;

OclLAnyType returns OclLAnyType:
	name='OclLAny'	
;

SetType returns SetType:
	name='Set' '(' elementType=OclLType ')'
;

SequenceType returns SequenceType:
	name='Sequence' '(' elementType=OclLType ')'
;

OrderedSetType returns OrderedSetType:
	name='OrderedSet' '(' elementType=OclLType ')'
;

BagType returns BagType:
	name='BagType' '(' elementType=OclLType ')'
;

RealType returns RealType:
	name='Real'
;

IntegerType returns IntegerType:
	name='Integer'
;

BooleanType returns BooleanType:
	name='Boolean'
;

StringType returns StringType:
	name='String'
;