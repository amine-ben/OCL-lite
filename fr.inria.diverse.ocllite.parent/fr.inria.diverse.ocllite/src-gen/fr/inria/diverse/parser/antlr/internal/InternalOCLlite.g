/*
 * generated by Xtext 2.10.0
 */
grammar InternalOCLlite;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.diverse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.diverse.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.diverse.services.OCLliteGrammarAccess;

}

@parser::members {

 	private OCLliteGrammarAccess grammarAccess;

    public InternalOCLliteParser(TokenStream input, OCLliteGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Module";
   	}

   	@Override
   	protected OCLliteGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	iv_ruleModule=ruleModule
	{ $current=$iv_ruleModule.current; }
	EOF;

// Rule Module
ruleModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModuleAccess().getModuleAction_0(),
					$current);
			}
		)
		otherlv_1='module'
		{
			newLeafNode(otherlv_1, grammarAccess.getModuleAccess().getModuleKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='@@source'
		{
			newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getSourceKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getSourceOclLModelParserRuleCall_4_0());
				}
				lv_source_4_0=ruleOclLModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					set(
						$current,
						"source",
						lv_source_4_0,
						"fr.inria.diverse.OCLlite.OclLModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='@@input'
		{
			newLeafNode(otherlv_5, grammarAccess.getModuleAccess().getInputKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModuleAccess().getInputOclLModelParserRuleCall_6_0());
				}
				lv_input_6_0=ruleOclLModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModuleRule());
					}
					set(
						$current,
						"input",
						lv_input_6_0,
						"fr.inria.diverse.OCLlite.OclLModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModuleAccess().getImportsImportParserRuleCall_7_0_0());
					}
					lv_imports_7_0=ruleImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuleRule());
						}
						add(
							$current,
							"imports",
							lv_imports_7_0,
							"fr.inria.diverse.OCLlite.Import");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModuleAccess().getImportsImportParserRuleCall_7_1_0());
					}
					lv_imports_8_0=ruleImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuleRule());
						}
						add(
							$current,
							"imports",
							lv_imports_8_0,
							"fr.inria.diverse.OCLlite.Import");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModuleAccess().getElementsModuleElementParserRuleCall_8_0_0());
					}
					lv_elements_9_0=ruleModuleElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuleRule());
						}
						add(
							$current,
							"elements",
							lv_elements_9_0,
							"fr.inria.diverse.OCLlite.ModuleElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModuleAccess().getElementsModuleElementParserRuleCall_8_1_0());
					}
					lv_elements_10_0=ruleModuleElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModuleRule());
						}
						add(
							$current,
							"elements",
							lv_elements_10_0,
							"fr.inria.diverse.OCLlite.ModuleElement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleOclLModel
entryRuleOclLModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOclLModelRule()); }
	iv_ruleOclLModel=ruleOclLModel
	{ $current=$iv_ruleOclLModel.current; }
	EOF;

// Rule OclLModel
ruleOclLModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOclLModelAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOclLModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOclLModelAccess().getUriURI_ParserRuleCall_1_0());
				}
				lv_uri_1_0=ruleURI_
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOclLModelRule());
					}
					set(
						$current,
						"uri",
						lv_uri_1_0,
						"fr.inria.diverse.OCLlite.URI_");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleURI_
entryRuleURI_ returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getURI_Rule()); }
	iv_ruleURI_=ruleURI_
	{ $current=$iv_ruleURI_.current; }
	EOF;

// Rule URI_
ruleURI_ returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='uri='
		{
			newLeafNode(otherlv_0, grammarAccess.getURI_Access().getUriKeyword_0());
		}
		(
			(
				lv_scheme_1_0=RULE_SCHEME
				{
					newLeafNode(lv_scheme_1_0, grammarAccess.getURI_Access().getSchemeSCHEMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getURI_Rule());
					}
					setWithLastConsumed(
						$current,
						"scheme",
						lv_scheme_1_0,
						"fr.inria.diverse.OCLlite.SCHEME");
				}
			)
		)
		otherlv_2='://'
		{
			newLeafNode(otherlv_2, grammarAccess.getURI_Access().getColonSolidusSolidusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getURI_Access().getAuthorityAUTHORITYParserRuleCall_3_0());
				}
				lv_authority_3_0=ruleAUTHORITY
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getURI_Rule());
					}
					set(
						$current,
						"authority",
						lv_authority_3_0,
						"fr.inria.diverse.OCLlite.AUTHORITY");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='/'
		{
			newLeafNode(otherlv_4, grammarAccess.getURI_Access().getSolidusKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getURI_Access().getFragment_FRAGMENTParserRuleCall_5_0());
				}
				lv_fragment__5_0=ruleFRAGMENT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getURI_Rule());
					}
					set(
						$current,
						"fragment_",
						lv_fragment__5_0,
						"fr.inria.diverse.OCLlite.FRAGMENT");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFRAGMENT
entryRuleFRAGMENT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFRAGMENTRule()); }
	iv_ruleFRAGMENT=ruleFRAGMENT
	{ $current=$iv_ruleFRAGMENT.current.getText(); }
	EOF;

// Rule FRAGMENT
ruleFRAGMENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFRAGMENTAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFRAGMENTAccess().getSolidusKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFRAGMENTAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleAUTHORITY
entryRuleAUTHORITY returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAUTHORITYRule()); }
	iv_ruleAUTHORITY=ruleAUTHORITY
	{ $current=$iv_ruleAUTHORITY.current.getText(); }
	EOF;

// Rule AUTHORITY
ruleAUTHORITY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getAUTHORITYAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAUTHORITYAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getAUTHORITYAccess().getIDTerminalRuleCall_1_1());
			}
		)*
		(
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAUTHORITYAccess().getColonKeyword_2_0());
			}
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getAUTHORITYAccess().getINTTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getImportAccess().getImportAction_0(),
					$current);
			}
		)
		otherlv_1='imports'
		{
			newLeafNode(otherlv_1, grammarAccess.getImportAccess().getImportsKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getImportAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleModuleElement
entryRuleModuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModuleElementRule()); }
	iv_ruleModuleElement=ruleModuleElement
	{ $current=$iv_ruleModuleElement.current; }
	EOF;

// Rule ModuleElement
ruleModuleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getModuleElementAccess().getQueryParserRuleCall());
	}
	this_Query_0=ruleQuery
	{
		$current = $this_Query_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getQueryAccess().getQueryAction_0(),
					$current);
			}
		)
		otherlv_1='query'
		{
			newLeafNode(otherlv_1, grammarAccess.getQueryAccess().getQueryKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQueryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getQueryAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getBodyOclLExpressionParserRuleCall_4_0());
				}
				lv_body_4_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					set(
						$current,
						"body",
						lv_body_4_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getQueryAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); }
	iv_ruleUnaryOperator=ruleUnaryOperator
	{ $current=$iv_ruleUnaryOperator.current.getText(); }
	EOF;

// Rule UnaryOperator
ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_0());
		}
		    |
		kw='not'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getNotKeyword_1());
		}
	)
;

// Entry rule entryRuleAndOperator
entryRuleAndOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAndOperatorRule()); }
	iv_ruleAndOperator=ruleAndOperator
	{ $current=$iv_ruleAndOperator.current.getText(); }
	EOF;

// Rule AndOperator
ruleAndOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='and'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getAndOperatorAccess().getAndKeyword());
	}
;

// Entry rule entryRuleOrOperator
entryRuleOrOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOrOperatorRule()); }
	iv_ruleOrOperator=ruleOrOperator
	{ $current=$iv_ruleOrOperator.current.getText(); }
	EOF;

// Rule OrOperator
ruleOrOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='or'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOrOperatorAccess().getOrKeyword());
	}
;

// Entry rule entryRuleXorOperator
entryRuleXorOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getXorOperatorRule()); }
	iv_ruleXorOperator=ruleXorOperator
	{ $current=$iv_ruleXorOperator.current.getText(); }
	EOF;

// Rule XorOperator
ruleXorOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='xor'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getXorOperatorAccess().getXorKeyword());
	}
;

// Entry rule entryRuleImpliesOperator
entryRuleImpliesOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImpliesOperatorRule()); }
	iv_ruleImpliesOperator=ruleImpliesOperator
	{ $current=$iv_ruleImpliesOperator.current.getText(); }
	EOF;

// Rule ImpliesOperator
ruleImpliesOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='implies'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getImpliesOperatorAccess().getImpliesKeyword());
	}
;

// Entry rule entryRuleNavigationOperator
entryRuleNavigationOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNavigationOperatorRule()); }
	iv_ruleNavigationOperator=ruleNavigationOperator
	{ $current=$iv_ruleNavigationOperator.current.getText(); }
	EOF;

// Rule NavigationOperator
ruleNavigationOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNavigationOperatorAccess().getFullStopKeyword_0());
		}
		    |
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNavigationOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
	)
;

// Entry rule entryRuleCollectionOpID
entryRuleCollectionOpID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCollectionOpIDRule()); }
	iv_ruleCollectionOpID=ruleCollectionOpID
	{ $current=$iv_ruleCollectionOpID.current.getText(); }
	EOF;

// Rule CollectionOpID
ruleCollectionOpID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='size'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getSizeKeyword_0());
		}
		    |
		kw='includes'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getIncludesKeyword_1());
		}
		    |
		kw='excludes'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getExcludesKeyword_2());
		}
		    |
		kw='count'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getCountKeyword_3());
		}
		    |
		kw='includesAll'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getIncludesAllKeyword_4());
		}
		    |
		kw='excludesAll'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getExcludesAllKeyword_5());
		}
		    |
		kw='isEmpty'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getIsEmptyKeyword_6());
		}
		    |
		kw='notEmpty'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getNotEmptyKeyword_7());
		}
		    |
		kw='sum'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getSumKeyword_8());
		}
		    |
		kw='asBag'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getAsBagKeyword_9());
		}
		    |
		kw='asSet'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getAsSetKeyword_10());
		}
		    |
		kw='asSequence'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getAsSequenceKeyword_11());
		}
		    |
		kw='union'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getUnionKeyword_12());
		}
		    |
		kw='flatten'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getFlattenKeyword_13());
		}
		    |
		kw='append'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getAppendKeyword_14());
		}
		    |
		kw='prepend'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getPrependKeyword_15());
		}
		    |
		kw='insertAt'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getInsertAtKeyword_16());
		}
		    |
		kw='subSequence'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getSubSequenceKeyword_17());
		}
		    |
		kw='at'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getAtKeyword_18());
		}
		    |
		kw='indexOf'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getIndexOfKeyword_19());
		}
		    |
		kw='first'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getFirstKeyword_20());
		}
		    |
		kw='last'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getLastKeyword_21());
		}
		    |
		kw='including'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getIncludingKeyword_22());
		}
		    |
		kw='excluding'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCollectionOpIDAccess().getExcludingKeyword_23());
		}
	)
;

// Entry rule entryRuleIterativeOperationID
entryRuleIterativeOperationID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIterativeOperationIDRule()); }
	iv_ruleIterativeOperationID=ruleIterativeOperationID
	{ $current=$iv_ruleIterativeOperationID.current.getText(); }
	EOF;

// Rule IterativeOperationID
ruleIterativeOperationID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='exists'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIterativeOperationIDAccess().getExistsKeyword_0());
		}
		    |
		kw='forAll'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIterativeOperationIDAccess().getForAllKeyword_1());
		}
		    |
		kw='isUnique'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIterativeOperationIDAccess().getIsUniqueKeyword_2());
		}
		    |
		kw='any'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIterativeOperationIDAccess().getAnyKeyword_3());
		}
		    |
		kw='one'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIterativeOperationIDAccess().getOneKeyword_4());
		}
		    |
		kw='collect'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIterativeOperationIDAccess().getCollectKeyword_5());
		}
		    |
		kw='select'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIterativeOperationIDAccess().getSelectKeyword_6());
		}
		    |
		kw='reject'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIterativeOperationIDAccess().getRejectKeyword_7());
		}
	)
;

// Entry rule entryRuleOclLExpression
entryRuleOclLExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOclLExpressionRule()); }
	iv_ruleOclLExpression=ruleOclLExpression
	{ $current=$iv_ruleOclLExpression.current; }
	EOF;

// Rule OclLExpression
ruleOclLExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOclLExpressionAccess().getImpliesOpExpParserRuleCall_0());
		}
		this_ImpliesOpExp_0=ruleImpliesOpExp
		{
			$current = $this_ImpliesOpExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLExpressionAccess().getLetExpParserRuleCall_1());
		}
		this_LetExp_1=ruleLetExp
		{
			$current = $this_LetExp_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLExpressionAccess().getUnaryOpExpParserRuleCall_2());
		}
		this_UnaryOpExp_2=ruleUnaryOpExp
		{
			$current = $this_UnaryOpExp_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLetExp
entryRuleLetExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetExpRule()); }
	iv_ruleLetExp=ruleLetExp
	{ $current=$iv_ruleLetExp.current; }
	EOF;

// Rule LetExp
ruleLetExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='let'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLetExpAccess().getNameLetKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLetExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "let");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpAccess().getVariableLocalVariableParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleLocalVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"fr.inria.diverse.OCLlite.LocalVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getLetExpAccess().getInKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetExpAccess().getInOclLExpressionParserRuleCall_3_0());
				}
				lv_in_3_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetExpRule());
					}
					set(
						$current,
						"in",
						lv_in_3_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryOpExp
entryRuleUnaryOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOpExpRule()); }
	iv_ruleUnaryOpExp=ruleUnaryOpExp
	{ $current=$iv_ruleUnaryOpExp.current; }
	EOF;

// Rule UnaryOpExp
ruleUnaryOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryOpExpAccess().getNameUnaryOperatorParserRuleCall_0_0());
				}
				lv_name_0_0=ruleUnaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryOpExpRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"fr.inria.diverse.OCLlite.UnaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryOpExpAccess().getTargetOclLExpressionParserRuleCall_1_0());
				}
				lv_target_1_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryOpExpRule());
					}
					set(
						$current,
						"target",
						lv_target_1_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleImpliesOpExp
entryRuleImpliesOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImpliesOpExpRule()); }
	iv_ruleImpliesOpExp=ruleImpliesOpExp
	{ $current=$iv_ruleImpliesOpExp.current; }
	EOF;

// Rule ImpliesOpExp
ruleImpliesOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImpliesOpExpAccess().getXorOpExpParserRuleCall_0());
		}
		this_XorOpExp_0=ruleXorOpExp
		{
			$current = $this_XorOpExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getImpliesOpExpAccess().getBoolOpCallExpSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImpliesOpExpAccess().getNameImpliesOperatorParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleImpliesOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesOpExpRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"fr.inria.diverse.OCLlite.ImpliesOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImpliesOpExpAccess().getTargetXorOpExpParserRuleCall_1_2_0());
					}
					lv_target_3_0=ruleXorOpExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImpliesOpExpRule());
						}
						set(
							$current,
							"target",
							lv_target_3_0,
							"fr.inria.diverse.OCLlite.XorOpExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXorOpExp
entryRuleXorOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorOpExpRule()); }
	iv_ruleXorOpExp=ruleXorOpExp
	{ $current=$iv_ruleXorOpExp.current; }
	EOF;

// Rule XorOpExp
ruleXorOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorOpExpAccess().getOrOpExpParserRuleCall_0());
		}
		this_OrOpExp_0=ruleOrOpExp
		{
			$current = $this_OrOpExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXorOpExpAccess().getBoolOpCallExpSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXorOpExpAccess().getNameXorOperatorParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleXorOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorOpExpRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"fr.inria.diverse.OCLlite.XorOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXorOpExpAccess().getTargetOrOpExpParserRuleCall_1_2_0());
					}
					lv_target_3_0=ruleOrOpExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorOpExpRule());
						}
						set(
							$current,
							"target",
							lv_target_3_0,
							"fr.inria.diverse.OCLlite.OrOpExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOrOpExp
entryRuleOrOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrOpExpRule()); }
	iv_ruleOrOpExp=ruleOrOpExp
	{ $current=$iv_ruleOrOpExp.current; }
	EOF;

// Rule OrOpExp
ruleOrOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrOpExpAccess().getAndOpExpParserRuleCall_0());
		}
		this_AndOpExp_0=ruleAndOpExp
		{
			$current = $this_AndOpExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrOpExpAccess().getBoolOpCallExpSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrOpExpAccess().getNameOrOperatorParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleOrOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrOpExpRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"fr.inria.diverse.OCLlite.OrOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrOpExpAccess().getTargetAndOpExpParserRuleCall_1_2_0());
					}
					lv_target_3_0=ruleAndOpExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrOpExpRule());
						}
						set(
							$current,
							"target",
							lv_target_3_0,
							"fr.inria.diverse.OCLlite.AndOpExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndOpExp
entryRuleAndOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndOpExpRule()); }
	iv_ruleAndOpExp=ruleAndOpExp
	{ $current=$iv_ruleAndOpExp.current; }
	EOF;

// Rule AndOpExp
ruleAndOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndOpExpAccess().getEqOpExpParserRuleCall_0());
		}
		this_EqOpExp_0=ruleEqOpExp
		{
			$current = $this_EqOpExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndOpExpAccess().getBoolOpCallExpSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndOpExpAccess().getNameAndOperatorParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleAndOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndOpExpRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"fr.inria.diverse.OCLlite.AndOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndOpExpAccess().getTargetEqOpExpParserRuleCall_1_2_0());
					}
					lv_target_3_0=ruleEqOpExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndOpExpRule());
						}
						set(
							$current,
							"target",
							lv_target_3_0,
							"fr.inria.diverse.OCLlite.EqOpExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqOpExp
entryRuleEqOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqOpExpRule()); }
	iv_ruleEqOpExp=ruleEqOpExp
	{ $current=$iv_ruleEqOpExp.current; }
	EOF;

// Rule EqOpExp
ruleEqOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqOpExpAccess().getComparisonOpExpParserRuleCall_0());
		}
		this_ComparisonOpExp_0=ruleComparisonOpExp
		{
			$current = $this_ComparisonOpExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqOpExpAccess().getEqOpCallExpSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_name_2_1='<>'
						{
							newLeafNode(lv_name_2_1, grammarAccess.getEqOpExpAccess().getNameLessThanSignGreaterThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_1, null);
						}
						    |
						lv_name_2_2='='
						{
							newLeafNode(lv_name_2_2, grammarAccess.getEqOpExpAccess().getNameEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqOpExpAccess().getTargetComparisonOpExpParserRuleCall_1_2_0());
					}
					lv_target_3_0=ruleComparisonOpExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqOpExpRule());
						}
						set(
							$current,
							"target",
							lv_target_3_0,
							"fr.inria.diverse.OCLlite.ComparisonOpExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparisonOpExp
entryRuleComparisonOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOpExpRule()); }
	iv_ruleComparisonOpExp=ruleComparisonOpExp
	{ $current=$iv_ruleComparisonOpExp.current; }
	EOF;

// Rule ComparisonOpExp
ruleComparisonOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonOpExpAccess().getAdditionOpExpParserRuleCall_0());
		}
		this_AdditionOpExp_0=ruleAdditionOpExp
		{
			$current = $this_AdditionOpExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonOpExpAccess().getComOpCallExpSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_name_2_1='>'
						{
							newLeafNode(lv_name_2_1, grammarAccess.getComparisonOpExpAccess().getNameGreaterThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_1, null);
						}
						    |
						lv_name_2_2='<'
						{
							newLeafNode(lv_name_2_2, grammarAccess.getComparisonOpExpAccess().getNameLessThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_2, null);
						}
						    |
						lv_name_2_3='>='
						{
							newLeafNode(lv_name_2_3, grammarAccess.getComparisonOpExpAccess().getNameGreaterThanSignEqualsSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_3, null);
						}
						    |
						lv_name_2_4='<='
						{
							newLeafNode(lv_name_2_4, grammarAccess.getComparisonOpExpAccess().getNameLessThanSignEqualsSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonOpExpAccess().getTargetAdditionOpExpParserRuleCall_1_2_0());
					}
					lv_target_3_0=ruleAdditionOpExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonOpExpRule());
						}
						set(
							$current,
							"target",
							lv_target_3_0,
							"fr.inria.diverse.OCLlite.AdditionOpExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdditionOpExp
entryRuleAdditionOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionOpExpRule()); }
	iv_ruleAdditionOpExp=ruleAdditionOpExp
	{ $current=$iv_ruleAdditionOpExp.current; }
	EOF;

// Rule AdditionOpExp
ruleAdditionOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionOpExpAccess().getMultiOpExpParserRuleCall_0());
		}
		this_MultiOpExp_0=ruleMultiOpExp
		{
			$current = $this_MultiOpExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionOpExpAccess().getAddOpCallExpSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_name_2_1='+'
						{
							newLeafNode(lv_name_2_1, grammarAccess.getAdditionOpExpAccess().getNamePlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_1, null);
						}
						    |
						lv_name_2_2='-'
						{
							newLeafNode(lv_name_2_2, grammarAccess.getAdditionOpExpAccess().getNameHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionOpExpAccess().getTargetMultiOpExpParserRuleCall_1_2_0());
					}
					lv_target_3_0=ruleMultiOpExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionOpExpRule());
						}
						set(
							$current,
							"target",
							lv_target_3_0,
							"fr.inria.diverse.OCLlite.MultiOpExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiOpExp
entryRuleMultiOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiOpExpRule()); }
	iv_ruleMultiOpExp=ruleMultiOpExp
	{ $current=$iv_ruleMultiOpExp.current; }
	EOF;

// Rule MultiOpExp
ruleMultiOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiOpExpAccess().getNavOpExpParserRuleCall_0());
		}
		this_NavOpExp_0=ruleNavOpExp
		{
			$current = $this_NavOpExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiOpExpAccess().getMulOpCallExpSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_name_2_1='*'
						{
							newLeafNode(lv_name_2_1, grammarAccess.getMultiOpExpAccess().getNameAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_1, null);
						}
						    |
						lv_name_2_2='/'
						{
							newLeafNode(lv_name_2_2, grammarAccess.getMultiOpExpAccess().getNameSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiOpExpRule());
							}
							setWithLastConsumed($current, "name", lv_name_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiOpExpAccess().getTargetNavOpExpParserRuleCall_1_2_0());
					}
					lv_target_3_0=ruleNavOpExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiOpExpRule());
						}
						set(
							$current,
							"target",
							lv_target_3_0,
							"fr.inria.diverse.OCLlite.NavOpExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNavOpExp
entryRuleNavOpExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavOpExpRule()); }
	iv_ruleNavOpExp=ruleNavOpExp
	{ $current=$iv_ruleNavOpExp.current; }
	EOF;

// Rule NavOpExp
ruleNavOpExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNavOpExpAccess().getNavigationOpCallExpParserRuleCall_0());
		}
		this_NavigationOpCallExp_0=ruleNavigationOpCallExp
		{
			$current = $this_NavigationOpCallExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getNavOpExpAccess().getNavigationExpSourceAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNavOpExpAccess().getNameNavigationOperatorParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleNavigationOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNavOpExpRule());
						}
						set(
							$current,
							"name",
							lv_name_2_0,
							"fr.inria.diverse.OCLlite.NavigationOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNavOpExpAccess().getTargetNavigationOpCallExpParserRuleCall_1_2_0());
					}
					lv_target_3_0=ruleNavigationOpCallExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNavOpExpRule());
						}
						set(
							$current,
							"target",
							lv_target_3_0,
							"fr.inria.diverse.OCLlite.NavigationOpCallExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNavigationOpCallExp
entryRuleNavigationOpCallExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigationOpCallExpRule()); }
	iv_ruleNavigationOpCallExp=ruleNavigationOpCallExp
	{ $current=$iv_ruleNavigationOpCallExp.current; }
	EOF;

// Rule NavigationOpCallExp
ruleNavigationOpCallExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNavigationOpCallExpAccess().getOperationCallParserRuleCall_0());
		}
		this_OperationCall_0=ruleOperationCall
		{
			$current = $this_OperationCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNavigationOpCallExpAccess().getNavigationOrAttributeCallParserRuleCall_1());
		}
		this_NavigationOrAttributeCall_1=ruleNavigationOrAttributeCall
		{
			$current = $this_NavigationOrAttributeCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNavigationOpCallExpAccess().getIterateExpParserRuleCall_2());
		}
		this_IterateExp_2=ruleIterateExp
		{
			$current = $this_IterateExp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNavigationOpCallExpAccess().getIteratorExpParserRuleCall_3());
		}
		this_IteratorExp_3=ruleIteratorExp
		{
			$current = $this_IteratorExp_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNavigationOpCallExpAccess().getCollectionOpCallParserRuleCall_4());
		}
		this_CollectionOpCall_4=ruleCollectionOpCall
		{
			$current = $this_CollectionOpCall_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNavigationOpCallExpAccess().getPrimaryExpParserRuleCall_5());
		}
		this_PrimaryExp_5=rulePrimaryExp
		{
			$current = $this_PrimaryExp_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCollectionOpCall
entryRuleCollectionOpCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionOpCallRule()); }
	iv_ruleCollectionOpCall=ruleCollectionOpCall
	{ $current=$iv_ruleCollectionOpCall.current; }
	EOF;

// Rule CollectionOpCall
ruleCollectionOpCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCollectionOpCallAccess().getCollectionOpCallExpAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCollectionOpCallAccess().getNameCollectionOpIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleCollectionOpID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollectionOpCallRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.diverse.OCLlite.CollectionOpID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCollectionOpCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCollectionOpCallAccess().getArgumentsOclLExpressionParserRuleCall_3_0_0());
					}
					lv_arguments_3_0=ruleOclLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollectionOpCallRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"fr.inria.diverse.OCLlite.OclLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getCollectionOpCallAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCollectionOpCallAccess().getArgumentsOclLExpressionParserRuleCall_3_1_1_0());
						}
						lv_arguments_5_0=ruleOclLExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCollectionOpCallRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_5_0,
								"fr.inria.diverse.OCLlite.OclLExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getCollectionOpCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleIterateExp
entryRuleIterateExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIterateExpRule()); }
	iv_ruleIterateExp=ruleIterateExp
	{ $current=$iv_ruleIterateExp.current; }
	EOF;

// Rule IterateExp
ruleIterateExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIterateExpAccess().getIterateExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='iterate'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getIterateExpAccess().getNameIterateKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIterateExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "iterate");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIterateExpAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIterateExpAccess().getIteratorsIteratorParserRuleCall_3_0());
				}
				lv_iterators_3_0=ruleIterator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIterateExpRule());
					}
					add(
						$current,
						"iterators",
						lv_iterators_3_0,
						"fr.inria.diverse.OCLlite.Iterator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getIterateExpAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIterateExpAccess().getIteratorsIteratorParserRuleCall_4_1_0());
					}
					lv_iterators_5_0=ruleIterator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIterateExpRule());
						}
						add(
							$current,
							"iterators",
							lv_iterators_5_0,
							"fr.inria.diverse.OCLlite.Iterator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getIterateExpAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIterateExpAccess().getResultLocalVariableParserRuleCall_6_0());
				}
				lv_result_7_0=ruleLocalVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIterateExpRule());
					}
					set(
						$current,
						"result",
						lv_result_7_0,
						"fr.inria.diverse.OCLlite.LocalVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='|'
		{
			newLeafNode(otherlv_8, grammarAccess.getIterateExpAccess().getVerticalLineKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIterateExpAccess().getBodyOclLExpressionParserRuleCall_8_0());
				}
				lv_body_9_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIterateExpRule());
					}
					set(
						$current,
						"body",
						lv_body_9_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=')'
		{
			newLeafNode(otherlv_10, grammarAccess.getIterateExpAccess().getRightParenthesisKeyword_9());
		}
	)
;

// Entry rule entryRuleIterator
entryRuleIterator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIteratorRule()); }
	iv_ruleIterator=ruleIterator
	{ $current=$iv_ruleIterator.current; }
	EOF;

// Rule Iterator
ruleIterator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getIteratorAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIteratorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getIteratorAccess().getColonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIteratorAccess().getTypeOclLTypeParserRuleCall_1_1_0());
					}
					lv_type_2_0=ruleOclLType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIteratorRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"fr.inria.diverse.OCLlite.OclLType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleIteratorExp
entryRuleIteratorExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIteratorExpRule()); }
	iv_ruleIteratorExp=ruleIteratorExp
	{ $current=$iv_ruleIteratorExp.current; }
	EOF;

// Rule IteratorExp
ruleIteratorExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIteratorExpAccess().getIteratorExpAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIteratorExpAccess().getNameIterativeOperationIDParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIterativeOperationID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIteratorExpRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.diverse.OCLlite.IterativeOperationID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIteratorExpAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIteratorExpAccess().getIteratorsIteratorParserRuleCall_3_0());
				}
				lv_iterators_3_0=ruleIterator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIteratorExpRule());
					}
					add(
						$current,
						"iterators",
						lv_iterators_3_0,
						"fr.inria.diverse.OCLlite.Iterator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getIteratorExpAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIteratorExpAccess().getIteratorsIteratorParserRuleCall_4_1_0());
					}
					lv_iterators_5_0=ruleIterator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIteratorExpRule());
						}
						add(
							$current,
							"iterators",
							lv_iterators_5_0,
							"fr.inria.diverse.OCLlite.Iterator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='|'
		{
			newLeafNode(otherlv_6, grammarAccess.getIteratorExpAccess().getVerticalLineKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIteratorExpAccess().getBodyOclLExpressionParserRuleCall_6_0());
				}
				lv_body_7_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIteratorExpRule());
					}
					set(
						$current,
						"body",
						lv_body_7_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getIteratorExpAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleNavigationOrAttributeCall
entryRuleNavigationOrAttributeCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigationOrAttributeCallRule()); }
	iv_ruleNavigationOrAttributeCall=ruleNavigationOrAttributeCall
	{ $current=$iv_ruleNavigationOrAttributeCall.current; }
	EOF;

// Rule NavigationOrAttributeCall
ruleNavigationOrAttributeCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNavigationOrAttributeCallAccess().getNavigationOrAttributeCallAction_0(),
					$current);
			}
		)
		(
			(
				lv_feature_1_0=RULE_ID
				{
					newLeafNode(lv_feature_1_0, grammarAccess.getNavigationOrAttributeCallAccess().getFeatureIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNavigationOrAttributeCallRule());
					}
					setWithLastConsumed(
						$current,
						"feature",
						lv_feature_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationCallRule()); }
	iv_ruleOperationCall=ruleOperationCall
	{ $current=$iv_ruleOperationCall.current; }
	EOF;

// Rule OperationCall
ruleOperationCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOperationCallAccess().getOperationCallAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOperationCallAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperationCallRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationCallAccess().getArgumentsOclLExpressionParserRuleCall_3_0_0());
					}
					lv_arguments_3_0=ruleOclLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationCallRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"fr.inria.diverse.OCLlite.OclLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getOperationCallAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOperationCallAccess().getArgumentsOclLExpressionParserRuleCall_3_1_1_0());
						}
						lv_arguments_5_0=ruleOclLExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOperationCallRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_5_0,
								"fr.inria.diverse.OCLlite.OclLExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleOclLModelElementExp
entryRuleOclLModelElementExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOclLModelElementExpRule()); }
	iv_ruleOclLModelElementExp=ruleOclLModelElementExp
	{ $current=$iv_ruleOclLModelElementExp.current; }
	EOF;

// Rule OclLModelElementExp
ruleOclLModelElementExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOclLModelElementExpAccess().getModelOclLModelParserRuleCall_0_0());
				}
				lv_model_0_0=ruleOclLModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOclLModelElementExpRule());
					}
					set(
						$current,
						"model",
						lv_model_0_0,
						"fr.inria.diverse.OCLlite.OclLModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0='::'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOclLModelElementExpAccess().getNameColonColonKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOclLModelElementExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "::");
				}
			)
		)
		(
			(
				lv_elements_2_0=RULE_ID
				{
					newLeafNode(lv_elements_2_0, grammarAccess.getOclLModelElementExpAccess().getElementsIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOclLModelElementExpRule());
					}
					addWithLastConsumed(
						$current,
						"elements",
						lv_elements_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='::'
			{
				newLeafNode(otherlv_3, grammarAccess.getOclLModelElementExpAccess().getColonColonKeyword_3_0());
			}
			(
				(
					lv_elements_4_0=RULE_ID
					{
						newLeafNode(lv_elements_4_0, grammarAccess.getOclLModelElementExpAccess().getElementsIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOclLModelElementExpRule());
						}
						addWithLastConsumed(
							$current,
							"elements",
							lv_elements_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getOclLModelElementExpAccess().getTargetAllInstancesOpCallParserRuleCall_4_0());
				}
				lv_target_5_0=ruleAllInstancesOpCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOclLModelElementExpRule());
					}
					set(
						$current,
						"target",
						lv_target_5_0,
						"fr.inria.diverse.OCLlite.AllInstancesOpCall");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAllInstancesOpCall
entryRuleAllInstancesOpCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllInstancesOpCallRule()); }
	iv_ruleAllInstancesOpCall=ruleAllInstancesOpCall
	{ $current=$iv_ruleAllInstancesOpCall.current; }
	EOF;

// Rule AllInstancesOpCall
ruleAllInstancesOpCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAllInstancesOpCallAccess().getOperationCallAction_0(),
					$current);
			}
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getAllInstancesOpCallAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_name_2_0='allInstances'
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAllInstancesOpCallAccess().getNameAllInstancesKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAllInstancesOpCallRule());
					}
					setWithLastConsumed($current, "name", lv_name_2_0, "allInstances");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getAllInstancesOpCallAccess().getLeftParenthesisKeyword_3());
		}
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAllInstancesOpCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLocalVariable
entryRuleLocalVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalVariableRule()); }
	iv_ruleLocalVariable=ruleLocalVariable
	{ $current=$iv_ruleLocalVariable.current; }
	EOF;

// Rule LocalVariable
ruleLocalVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLocalVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocalVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLocalVariableAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalVariableAccess().getTypeOclLTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleOclLType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"fr.inria.diverse.OCLlite.OclLType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getLocalVariableAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalVariableAccess().getInitExpOclLExpressionParserRuleCall_4_0());
				}
				lv_initExp_4_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalVariableRule());
					}
					set(
						$current,
						"initExp",
						lv_initExp_4_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimaryExp
entryRulePrimaryExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpRule()); }
	iv_rulePrimaryExp=rulePrimaryExp
	{ $current=$iv_rulePrimaryExp.current; }
	EOF;

// Rule PrimaryExp
rulePrimaryExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getSeflExpParserRuleCall_0());
		}
		this_SeflExp_0=ruleSeflExp
		{
			$current = $this_SeflExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getNestedExpParserRuleCall_1());
		}
		this_NestedExp_1=ruleNestedExp
		{
			$current = $this_NestedExp_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getIfExpParserRuleCall_2());
		}
		this_IfExp_2=ruleIfExp
		{
			$current = $this_IfExp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getPrimitiveExpParserRuleCall_3());
		}
		this_PrimitiveExp_3=rulePrimitiveExp
		{
			$current = $this_PrimitiveExp_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getTupleExpParserRuleCall_4());
		}
		this_TupleExp_4=ruleTupleExp
		{
			$current = $this_TupleExp_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getLambdaExpParserRuleCall_5());
		}
		this_LambdaExp_5=ruleLambdaExp
		{
			$current = $this_LambdaExp_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getOclLModelElementExpParserRuleCall_6());
		}
		this_OclLModelElementExp_6=ruleOclLModelElementExp
		{
			$current = $this_OclLModelElementExp_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getMapExpParserRuleCall_7());
		}
		this_MapExp_7=ruleMapExp
		{
			$current = $this_MapExp_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpAccess().getCollectionExpParserRuleCall_8());
		}
		this_CollectionExp_8=ruleCollectionExp
		{
			$current = $this_CollectionExp_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLambdaExp
entryRuleLambdaExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLambdaExpRule()); }
	iv_ruleLambdaExp=ruleLambdaExp
	{ $current=$iv_ruleLambdaExp.current; }
	EOF;

// Rule LambdaExp
ruleLambdaExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLambdaExpAccess().getLambdaExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='Lambda'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLambdaExpAccess().getNameLambdaKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLambdaExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "Lambda");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getLambdaExpAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaExpAccess().getExpressionOclLExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaExpRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getLambdaExpAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCollectionExp
entryRuleCollectionExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionExpRule()); }
	iv_ruleCollectionExp=ruleCollectionExp
	{ $current=$iv_ruleCollectionExp.current; }
	EOF;

// Rule CollectionExp
ruleCollectionExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCollectionExpAccess().getBagExpParserRuleCall_0());
		}
		this_BagExp_0=ruleBagExp
		{
			$current = $this_BagExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionExpAccess().getSequenceExpParserRuleCall_1());
		}
		this_SequenceExp_1=ruleSequenceExp
		{
			$current = $this_SequenceExp_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionExpAccess().getSetExpParserRuleCall_2());
		}
		this_SetExp_2=ruleSetExp
		{
			$current = $this_SetExp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionExpAccess().getOrderedSetExpParserRuleCall_3());
		}
		this_OrderedSetExp_3=ruleOrderedSetExp
		{
			$current = $this_OrderedSetExp_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBagExp
entryRuleBagExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBagExpRule()); }
	iv_ruleBagExp=ruleBagExp
	{ $current=$iv_ruleBagExp.current; }
	EOF;

// Rule BagExp
ruleBagExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBagExpAccess().getBagExpAction_0(),
					$current);
			}
		)
		otherlv_1='Bag'
		{
			newLeafNode(otherlv_1, grammarAccess.getBagExpAccess().getBagKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBagExpAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBagExpAccess().getPartsOclLExpressionParserRuleCall_3_0());
				}
				lv_parts_3_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBagExpRule());
					}
					add(
						$current,
						"parts",
						lv_parts_3_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getBagExpAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBagExpAccess().getPartsOclLExpressionParserRuleCall_4_1_0());
					}
					lv_parts_5_0=ruleOclLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBagExpRule());
						}
						add(
							$current,
							"parts",
							lv_parts_5_0,
							"fr.inria.diverse.OCLlite.OclLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getBagExpAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleSequenceExp
entryRuleSequenceExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenceExpRule()); }
	iv_ruleSequenceExp=ruleSequenceExp
	{ $current=$iv_ruleSequenceExp.current; }
	EOF;

// Rule SequenceExp
ruleSequenceExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSequenceExpAccess().getSequenceExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='Sequence'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSequenceExpAccess().getNameSequenceKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSequenceExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "Sequence");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSequenceExpAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceExpAccess().getPartsOclLExpressionParserRuleCall_3_0());
				}
				lv_parts_3_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceExpRule());
					}
					add(
						$current,
						"parts",
						lv_parts_3_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getSequenceExpAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSequenceExpAccess().getPartsOclLExpressionParserRuleCall_4_1_0());
					}
					lv_parts_5_0=ruleOclLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSequenceExpRule());
						}
						add(
							$current,
							"parts",
							lv_parts_5_0,
							"fr.inria.diverse.OCLlite.OclLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSequenceExpAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleSetExp
entryRuleSetExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetExpRule()); }
	iv_ruleSetExp=ruleSetExp
	{ $current=$iv_ruleSetExp.current; }
	EOF;

// Rule SetExp
ruleSetExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetExpAccess().getSetExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='Set'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSetExpAccess().getNameSetKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "Set");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSetExpAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetExpAccess().getPartsOclLExpressionParserRuleCall_3_0());
				}
				lv_parts_3_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetExpRule());
					}
					add(
						$current,
						"parts",
						lv_parts_3_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getSetExpAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetExpAccess().getPartsOclLExpressionParserRuleCall_4_1_0());
					}
					lv_parts_5_0=ruleOclLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetExpRule());
						}
						add(
							$current,
							"parts",
							lv_parts_5_0,
							"fr.inria.diverse.OCLlite.OclLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSetExpAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleOrderedSetExp
entryRuleOrderedSetExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrderedSetExpRule()); }
	iv_ruleOrderedSetExp=ruleOrderedSetExp
	{ $current=$iv_ruleOrderedSetExp.current; }
	EOF;

// Rule OrderedSetExp
ruleOrderedSetExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOrderedSetExpAccess().getOrderedSetExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='OrderedSet'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOrderedSetExpAccess().getNameOrderedSetKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrderedSetExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "OrderedSet");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getOrderedSetExpAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrderedSetExpAccess().getPartsOclLExpressionParserRuleCall_3_0());
				}
				lv_parts_3_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrderedSetExpRule());
					}
					add(
						$current,
						"parts",
						lv_parts_3_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getOrderedSetExpAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrderedSetExpAccess().getPartsOclLExpressionParserRuleCall_4_1_0());
					}
					lv_parts_5_0=ruleOclLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrderedSetExpRule());
						}
						add(
							$current,
							"parts",
							lv_parts_5_0,
							"fr.inria.diverse.OCLlite.OclLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getOrderedSetExpAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleMapExp
entryRuleMapExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapExpRule()); }
	iv_ruleMapExp=ruleMapExp
	{ $current=$iv_ruleMapExp.current; }
	EOF;

// Rule MapExp
ruleMapExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMapExpAccess().getMapExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='Map'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMapExpAccess().getNameMapKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMapExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "Map");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMapExpAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapExpAccess().getMapElementsMapElementParserRuleCall_3_0());
				}
				lv_mapElements_3_0=ruleMapElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapExpRule());
					}
					add(
						$current,
						"mapElements",
						lv_mapElements_3_0,
						"fr.inria.diverse.OCLlite.MapElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getMapExpAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMapExpAccess().getMapElementsMapElementParserRuleCall_4_1_0());
					}
					lv_mapElements_5_0=ruleMapElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMapExpRule());
						}
						add(
							$current,
							"mapElements",
							lv_mapElements_5_0,
							"fr.inria.diverse.OCLlite.MapElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getMapExpAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleMapElement
entryRuleMapElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapElementRule()); }
	iv_ruleMapElement=ruleMapElement
	{ $current=$iv_ruleMapElement.current; }
	EOF;

// Rule MapElement
ruleMapElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getMapElementAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapElementAccess().getKeyOclLExpressionParserRuleCall_1_0());
				}
				lv_key_1_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapElementRule());
					}
					set(
						$current,
						"key",
						lv_key_1_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getMapElementAccess().getSemicolonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapElementAccess().getValueOclLExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapElementRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getMapElementAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleTupleExp
entryRuleTupleExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleExpRule()); }
	iv_ruleTupleExp=ruleTupleExp
	{ $current=$iv_ruleTupleExp.current; }
	EOF;

// Rule TupleExp
ruleTupleExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTupleExpAccess().getTupleExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='Tuple'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTupleExpAccess().getNameTupleKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTupleExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "Tuple");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTupleExpAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTupleExpAccess().getPartsTuplePartParserRuleCall_3_0());
				}
				lv_parts_3_0=ruleTuplePart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTupleExpRule());
					}
					add(
						$current,
						"parts",
						lv_parts_3_0,
						"fr.inria.diverse.OCLlite.TuplePart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTupleExpAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTupleExpAccess().getPartsTuplePartParserRuleCall_4_1_0());
					}
					lv_parts_5_0=ruleTuplePart
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTupleExpRule());
						}
						add(
							$current,
							"parts",
							lv_parts_5_0,
							"fr.inria.diverse.OCLlite.TuplePart");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTupleExpAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleTuplePart
entryRuleTuplePart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTuplePartRule()); }
	iv_ruleTuplePart=ruleTuplePart
	{ $current=$iv_ruleTuplePart.current; }
	EOF;

// Rule TuplePart
ruleTuplePart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_STRING
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTuplePartAccess().getNameSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTuplePartRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getTuplePartAccess().getColonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTuplePartAccess().getTypeOclLTypeParserRuleCall_1_1_0());
					}
					lv_type_2_0=ruleOclLType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTuplePartRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"fr.inria.diverse.OCLlite.OclLType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getTuplePartAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTuplePartAccess().getInitOclLExpressionParserRuleCall_3_0());
				}
				lv_init_4_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTuplePartRule());
					}
					set(
						$current,
						"init",
						lv_init_4_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrimitiveExp
entryRulePrimitiveExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveExpRule()); }
	iv_rulePrimitiveExp=rulePrimitiveExp
	{ $current=$iv_rulePrimitiveExp.current; }
	EOF;

// Rule PrimitiveExp
rulePrimitiveExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimitiveExpAccess().getNumberExpParserRuleCall_0());
		}
		this_NumberExp_0=ruleNumberExp
		{
			$current = $this_NumberExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveExpAccess().getStringExpParserRuleCall_1());
		}
		this_StringExp_1=ruleStringExp
		{
			$current = $this_StringExp_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveExpAccess().getBooleanExpParserRuleCall_2());
		}
		this_BooleanExp_2=ruleBooleanExp
		{
			$current = $this_BooleanExp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveExpAccess().getUnlimitedNaturalExpParserRuleCall_3());
		}
		this_UnlimitedNaturalExp_3=ruleUnlimitedNaturalExp
		{
			$current = $this_UnlimitedNaturalExp_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveExpAccess().getInvalidExpParserRuleCall_4());
		}
		this_InvalidExp_4=ruleInvalidExp
		{
			$current = $this_InvalidExp_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveExpAccess().getNullExpParserRuleCall_5());
		}
		this_NullExp_5=ruleNullExp
		{
			$current = $this_NullExp_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumberExp
entryRuleNumberExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberExpRule()); }
	iv_ruleNumberExp=ruleNumberExp
	{ $current=$iv_ruleNumberExp.current; }
	EOF;

// Rule NumberExp
ruleNumberExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_symbol_0_0=RULE_INT
			{
				newLeafNode(lv_symbol_0_0, grammarAccess.getNumberExpAccess().getSymbolINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberExpRule());
				}
				setWithLastConsumed(
					$current,
					"symbol",
					lv_symbol_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleStringExp
entryRuleStringExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringExpRule()); }
	iv_ruleStringExp=ruleStringExp
	{ $current=$iv_ruleStringExp.current; }
	EOF;

// Rule StringExp
ruleStringExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_segments_0_0=RULE_STRING
			{
				newLeafNode(lv_segments_0_0, grammarAccess.getStringExpAccess().getSegmentsSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringExpRule());
				}
				addWithLastConsumed(
					$current,
					"segments",
					lv_segments_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)+
;

// Entry rule entryRuleBooleanExp
entryRuleBooleanExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpRule()); }
	iv_ruleBooleanExp=ruleBooleanExp
	{ $current=$iv_ruleBooleanExp.current; }
	EOF;

// Rule BooleanExp
ruleBooleanExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_symbol_0_0='true'
				{
					newLeafNode(lv_symbol_0_0, grammarAccess.getBooleanExpAccess().getSymbolTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanExpRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_symbol_1_0='false'
				{
					newLeafNode(lv_symbol_1_0, grammarAccess.getBooleanExpAccess().getSymbolFalseKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanExpRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_1_0, "false");
				}
			)
		)
	)
;

// Entry rule entryRuleUnlimitedNaturalExp
entryRuleUnlimitedNaturalExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnlimitedNaturalExpRule()); }
	iv_ruleUnlimitedNaturalExp=ruleUnlimitedNaturalExp
	{ $current=$iv_ruleUnlimitedNaturalExp.current; }
	EOF;

// Rule UnlimitedNaturalExp
ruleUnlimitedNaturalExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnlimitedNaturalExpAccess().getUnlimitedNaturalLiteralExpAction_0(),
					$current);
			}
		)
		otherlv_1='*'
		{
			newLeafNode(otherlv_1, grammarAccess.getUnlimitedNaturalExpAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleInvalidExp
entryRuleInvalidExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvalidExpRule()); }
	iv_ruleInvalidExp=ruleInvalidExp
	{ $current=$iv_ruleInvalidExp.current; }
	EOF;

// Rule InvalidExp
ruleInvalidExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInvalidExpAccess().getInvalidLiteralExpAction_0(),
					$current);
			}
		)
		otherlv_1='invalid'
		{
			newLeafNode(otherlv_1, grammarAccess.getInvalidExpAccess().getInvalidKeyword_1());
		}
	)
;

// Entry rule entryRuleNullExp
entryRuleNullExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullExpRule()); }
	iv_ruleNullExp=ruleNullExp
	{ $current=$iv_ruleNullExp.current; }
	EOF;

// Rule NullExp
ruleNullExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNullExpAccess().getNullLiteralExpAction_0(),
					$current);
			}
		)
		otherlv_1='null'
		{
			newLeafNode(otherlv_1, grammarAccess.getNullExpAccess().getNullKeyword_1());
		}
	)
;

// Entry rule entryRuleIfExp
entryRuleIfExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpRule()); }
	iv_ruleIfExp=ruleIfExp
	{ $current=$iv_ruleIfExp.current; }
	EOF;

// Rule IfExp
ruleIfExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='if'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getIfExpAccess().getNameIfKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIfExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "if");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpAccess().getConditionOclLExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfExpAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpAccess().getThenOclLExpressionParserRuleCall_3_0());
				}
				lv_then_3_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpRule());
					}
					set(
						$current,
						"then",
						lv_then_3_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpAccess().getIfThenElseIfThenExpParserRuleCall_4_0());
				}
				lv_ifThen_4_0=ruleElseIfThenExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpRule());
					}
					add(
						$current,
						"ifThen",
						lv_ifThen_4_0,
						"fr.inria.diverse.OCLlite.ElseIfThenExp");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='else'
		{
			newLeafNode(otherlv_5, grammarAccess.getIfExpAccess().getElseKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpAccess().getElseOclLExpressionParserRuleCall_6_0());
				}
				lv_else_6_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpRule());
					}
					set(
						$current,
						"else",
						lv_else_6_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='endif'
		{
			newLeafNode(otherlv_7, grammarAccess.getIfExpAccess().getEndifKeyword_7());
		}
	)
;

// Entry rule entryRuleElseIfThenExp
entryRuleElseIfThenExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseIfThenExpRule()); }
	iv_ruleElseIfThenExp=ruleElseIfThenExp
	{ $current=$iv_ruleElseIfThenExp.current; }
	EOF;

// Rule ElseIfThenExp
ruleElseIfThenExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getElseIfThenExpAccess().getElseIfThenExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='elseif'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getElseIfThenExpAccess().getNameElseifKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElseIfThenExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "elseif");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfThenExpAccess().getConditionOclLExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfThenExpRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='then'
		{
			newLeafNode(otherlv_3, grammarAccess.getElseIfThenExpAccess().getThenKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfThenExpAccess().getThenOclLExpressionParserRuleCall_4_0());
				}
				lv_then_4_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfThenExpRule());
					}
					set(
						$current,
						"then",
						lv_then_4_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSeflExp
entryRuleSeflExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSeflExpRule()); }
	iv_ruleSeflExp=ruleSeflExp
	{ $current=$iv_ruleSeflExp.current; }
	EOF;

// Rule SeflExp
ruleSeflExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSeflExpAccess().getSelfExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='self'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSeflExpAccess().getNameSelfKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSeflExpRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "self");
				}
			)
		)
	)
;

// Entry rule entryRuleNestedExp
entryRuleNestedExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedExpRule()); }
	iv_ruleNestedExp=ruleNestedExp
	{ $current=$iv_ruleNestedExp.current; }
	EOF;

// Rule NestedExp
ruleNestedExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNestedExpAccess().getNestedExpAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getNestedExpAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedExpAccess().getExpOclLExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleOclLExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedExpRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"fr.inria.diverse.OCLlite.OclLExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNestedExpAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleOclLType
entryRuleOclLType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOclLTypeRule()); }
	iv_ruleOclLType=ruleOclLType
	{ $current=$iv_ruleOclLType.current; }
	EOF;

// Rule OclLType
ruleOclLType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getStringTypeParserRuleCall_0());
		}
		this_StringType_0=ruleStringType
		{
			$current = $this_StringType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getBooleanTypeParserRuleCall_1());
		}
		this_BooleanType_1=ruleBooleanType
		{
			$current = $this_BooleanType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getIntegerTypeParserRuleCall_2());
		}
		this_IntegerType_2=ruleIntegerType
		{
			$current = $this_IntegerType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getRealTypeParserRuleCall_3());
		}
		this_RealType_3=ruleRealType
		{
			$current = $this_RealType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getBagTypeParserRuleCall_4());
		}
		this_BagType_4=ruleBagType
		{
			$current = $this_BagType_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getOrderedSetTypeParserRuleCall_5());
		}
		this_OrderedSetType_5=ruleOrderedSetType
		{
			$current = $this_OrderedSetType_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getSequenceTypeParserRuleCall_6());
		}
		this_SequenceType_6=ruleSequenceType
		{
			$current = $this_SequenceType_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getSetTypeParserRuleCall_7());
		}
		this_SetType_7=ruleSetType
		{
			$current = $this_SetType_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getOclLAnyTypeParserRuleCall_8());
		}
		this_OclLAnyType_8=ruleOclLAnyType
		{
			$current = $this_OclLAnyType_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getTupleTypeParserRuleCall_9());
		}
		this_TupleType_9=ruleTupleType
		{
			$current = $this_TupleType_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getOclLModelElementParserRuleCall_10());
		}
		this_OclLModelElement_10=ruleOclLModelElement
		{
			$current = $this_OclLModelElement_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getMapTypeParserRuleCall_11());
		}
		this_MapType_11=ruleMapType
		{
			$current = $this_MapType_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getLambdaTypeParserRuleCall_12());
		}
		this_LambdaType_12=ruleLambdaType
		{
			$current = $this_LambdaType_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOclLTypeAccess().getEnvTypeParserRuleCall_13());
		}
		this_EnvType_13=ruleEnvType
		{
			$current = $this_EnvType_13.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOclLModelElement
entryRuleOclLModelElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOclLModelElementRule()); }
	iv_ruleOclLModelElement=ruleOclLModelElement
	{ $current=$iv_ruleOclLModelElement.current; }
	EOF;

// Rule OclLModelElement
ruleOclLModelElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOclLModelElementAccess().getModelOclLModelParserRuleCall_0_0());
				}
				lv_model_0_0=ruleOclLModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOclLModelElementRule());
					}
					set(
						$current,
						"model",
						lv_model_0_0,
						"fr.inria.diverse.OCLlite.OclLModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='::'
		{
			newLeafNode(otherlv_1, grammarAccess.getOclLModelElementAccess().getColonColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getOclLModelElementAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOclLModelElementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleEnvType
entryRuleEnvType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnvTypeRule()); }
	iv_ruleEnvType=ruleEnvType
	{ $current=$iv_ruleEnvType.current; }
	EOF;

// Rule EnvType
ruleEnvType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0='Env'
			{
				newLeafNode(lv_name_0_0, grammarAccess.getEnvTypeAccess().getNameEnvKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEnvTypeRule());
				}
				setWithLastConsumed($current, "name", lv_name_0_0, "Env");
			}
		)
	)
;

// Entry rule entryRuleLambdaType
entryRuleLambdaType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLambdaTypeRule()); }
	iv_ruleLambdaType=ruleLambdaType
	{ $current=$iv_ruleLambdaType.current; }
	EOF;

// Rule LambdaType
ruleLambdaType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Lambda'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLambdaTypeAccess().getNameLambdaKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLambdaTypeRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Lambda");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLambdaTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaTypeAccess().getArgsTypesOclLTypeParserRuleCall_2_0());
				}
				lv_argsTypes_2_0=ruleOclLType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaTypeRule());
					}
					add(
						$current,
						"argsTypes",
						lv_argsTypes_2_0,
						"fr.inria.diverse.OCLlite.OclLType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getLambdaTypeAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLambdaTypeAccess().getArgsTypesOclLTypeParserRuleCall_3_1_0());
					}
					lv_argsTypes_4_0=ruleOclLType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLambdaTypeRule());
						}
						add(
							$current,
							"argsTypes",
							lv_argsTypes_4_0,
							"fr.inria.diverse.OCLlite.OclLType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getLambdaTypeAccess().getRightParenthesisKeyword_4());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getLambdaTypeAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaTypeAccess().getReturnTypeOclLTypeParserRuleCall_6_0());
				}
				lv_returnType_7_0=ruleOclLType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaTypeRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_7_0,
						"fr.inria.diverse.OCLlite.OclLType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMapType
entryRuleMapType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	iv_ruleMapType=ruleMapType
	{ $current=$iv_ruleMapType.current; }
	EOF;

// Rule MapType
ruleMapType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Map'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMapTypeAccess().getNameMapKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMapTypeRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Map");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMapTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapTypeAccess().getKeyTypeOclLTypeParserRuleCall_2_0());
				}
				lv_keyType_2_0=ruleOclLType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapTypeRule());
					}
					set(
						$current,
						"keyType",
						lv_keyType_2_0,
						"fr.inria.diverse.OCLlite.OclLType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getMapTypeAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapTypeAccess().getValueTypeOclLTypeParserRuleCall_4_0());
				}
				lv_valueType_4_0=ruleOclLType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapTypeRule());
					}
					set(
						$current,
						"valueType",
						lv_valueType_4_0,
						"fr.inria.diverse.OCLlite.OclLType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMapTypeAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleTupleType
entryRuleTupleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleTypeRule()); }
	iv_ruleTupleType=ruleTupleType
	{ $current=$iv_ruleTupleType.current; }
	EOF;

// Rule TupleType
ruleTupleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	otherlv_0='TupleType'
	{
		newLeafNode(otherlv_0, grammarAccess.getTupleTypeAccess().getTupleTypeKeyword());
	}
;

// Entry rule entryRuleOclLAnyType
entryRuleOclLAnyType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOclLAnyTypeRule()); }
	iv_ruleOclLAnyType=ruleOclLAnyType
	{ $current=$iv_ruleOclLAnyType.current; }
	EOF;

// Rule OclLAnyType
ruleOclLAnyType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0='OclLAny'
			{
				newLeafNode(lv_name_0_0, grammarAccess.getOclLAnyTypeAccess().getNameOclLAnyKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getOclLAnyTypeRule());
				}
				setWithLastConsumed($current, "name", lv_name_0_0, "OclLAny");
			}
		)
	)
;

// Entry rule entryRuleSetType
entryRuleSetType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetTypeRule()); }
	iv_ruleSetType=ruleSetType
	{ $current=$iv_ruleSetType.current; }
	EOF;

// Rule SetType
ruleSetType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Set'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSetTypeAccess().getNameSetKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetTypeRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Set");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSetTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetTypeAccess().getElementTypeOclLTypeParserRuleCall_2_0());
				}
				lv_elementType_2_0=ruleOclLType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetTypeRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_2_0,
						"fr.inria.diverse.OCLlite.OclLType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSetTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSequenceType
entryRuleSequenceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenceTypeRule()); }
	iv_ruleSequenceType=ruleSequenceType
	{ $current=$iv_ruleSequenceType.current; }
	EOF;

// Rule SequenceType
ruleSequenceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Sequence'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSequenceTypeAccess().getNameSequenceKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSequenceTypeRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Sequence");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSequenceTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceTypeAccess().getElementTypeOclLTypeParserRuleCall_2_0());
				}
				lv_elementType_2_0=ruleOclLType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceTypeRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_2_0,
						"fr.inria.diverse.OCLlite.OclLType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSequenceTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleOrderedSetType
entryRuleOrderedSetType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrderedSetTypeRule()); }
	iv_ruleOrderedSetType=ruleOrderedSetType
	{ $current=$iv_ruleOrderedSetType.current; }
	EOF;

// Rule OrderedSetType
ruleOrderedSetType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='OrderedSet'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOrderedSetTypeAccess().getNameOrderedSetKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOrderedSetTypeRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "OrderedSet");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOrderedSetTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrderedSetTypeAccess().getElementTypeOclLTypeParserRuleCall_2_0());
				}
				lv_elementType_2_0=ruleOclLType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrderedSetTypeRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_2_0,
						"fr.inria.diverse.OCLlite.OclLType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOrderedSetTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleBagType
entryRuleBagType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBagTypeRule()); }
	iv_ruleBagType=ruleBagType
	{ $current=$iv_ruleBagType.current; }
	EOF;

// Rule BagType
ruleBagType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='BagType'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBagTypeAccess().getNameBagTypeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBagTypeRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "BagType");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBagTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBagTypeAccess().getElementTypeOclLTypeParserRuleCall_2_0());
				}
				lv_elementType_2_0=ruleOclLType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBagTypeRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_2_0,
						"fr.inria.diverse.OCLlite.OclLType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getBagTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRealType
entryRuleRealType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealTypeRule()); }
	iv_ruleRealType=ruleRealType
	{ $current=$iv_ruleRealType.current; }
	EOF;

// Rule RealType
ruleRealType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0='Real'
			{
				newLeafNode(lv_name_0_0, grammarAccess.getRealTypeAccess().getNameRealKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRealTypeRule());
				}
				setWithLastConsumed($current, "name", lv_name_0_0, "Real");
			}
		)
	)
;

// Entry rule entryRuleIntegerType
entryRuleIntegerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerTypeRule()); }
	iv_ruleIntegerType=ruleIntegerType
	{ $current=$iv_ruleIntegerType.current; }
	EOF;

// Rule IntegerType
ruleIntegerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0='Integer'
			{
				newLeafNode(lv_name_0_0, grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntegerTypeRule());
				}
				setWithLastConsumed($current, "name", lv_name_0_0, "Integer");
			}
		)
	)
;

// Entry rule entryRuleBooleanType
entryRuleBooleanType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanTypeRule()); }
	iv_ruleBooleanType=ruleBooleanType
	{ $current=$iv_ruleBooleanType.current; }
	EOF;

// Rule BooleanType
ruleBooleanType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0='Boolean'
			{
				newLeafNode(lv_name_0_0, grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBooleanTypeRule());
				}
				setWithLastConsumed($current, "name", lv_name_0_0, "Boolean");
			}
		)
	)
;

// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	iv_ruleStringType=ruleStringType
	{ $current=$iv_ruleStringType.current; }
	EOF;

// Rule StringType
ruleStringType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0='String'
			{
				newLeafNode(lv_name_0_0, grammarAccess.getStringTypeAccess().getNameStringKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringTypeRule());
				}
				setWithLastConsumed($current, "name", lv_name_0_0, "String");
			}
		)
	)
;

RULE_SCHEME : ('http'|'file'|'platform'|'neoemfhbase');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
