/**
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.oCLlite.util;

import fr.inria.diverse.oCLlite.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see fr.inria.diverse.oCLlite.OCLlitePackage
 * @generated
 */
public class OCLliteSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OCLlitePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OCLliteSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = OCLlitePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case OCLlitePackage.MODULE:
      {
        Module module = (Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.OCL_LMODEL:
      {
        OclLModel oclLModel = (OclLModel)theEObject;
        T result = caseOclLModel(oclLModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.URI_:
      {
        URI_ urI_ = (URI_)theEObject;
        T result = caseURI_(urI_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.MODULE_ELEMENT:
      {
        ModuleElement moduleElement = (ModuleElement)theEObject;
        T result = caseModuleElement(moduleElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.QUERY:
      {
        Query query = (Query)theEObject;
        T result = caseQuery(query);
        if (result == null) result = caseModuleElement(query);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.OCL_LEXPRESSION:
      {
        OclLExpression oclLExpression = (OclLExpression)theEObject;
        T result = caseOclLExpression(oclLExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.ITERATOR:
      {
        Iterator iterator = (Iterator)theEObject;
        T result = caseIterator(iterator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.LOCAL_VARIABLE:
      {
        LocalVariable localVariable = (LocalVariable)theEObject;
        T result = caseLocalVariable(localVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.COLLECTION_EXP:
      {
        CollectionExp collectionExp = (CollectionExp)theEObject;
        T result = caseCollectionExp(collectionExp);
        if (result == null) result = caseOclLExpression(collectionExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.BAG_EXP:
      {
        BagExp bagExp = (BagExp)theEObject;
        T result = caseBagExp(bagExp);
        if (result == null) result = caseCollectionExp(bagExp);
        if (result == null) result = caseOclLExpression(bagExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.SEQUENCE_EXP:
      {
        SequenceExp sequenceExp = (SequenceExp)theEObject;
        T result = caseSequenceExp(sequenceExp);
        if (result == null) result = caseCollectionExp(sequenceExp);
        if (result == null) result = caseOclLExpression(sequenceExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.SET_EXP:
      {
        SetExp setExp = (SetExp)theEObject;
        T result = caseSetExp(setExp);
        if (result == null) result = caseCollectionExp(setExp);
        if (result == null) result = caseOclLExpression(setExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.ORDERED_SET_EXP:
      {
        OrderedSetExp orderedSetExp = (OrderedSetExp)theEObject;
        T result = caseOrderedSetExp(orderedSetExp);
        if (result == null) result = caseCollectionExp(orderedSetExp);
        if (result == null) result = caseOclLExpression(orderedSetExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.MAP_EXP:
      {
        MapExp mapExp = (MapExp)theEObject;
        T result = caseMapExp(mapExp);
        if (result == null) result = caseOclLExpression(mapExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.MAP_ELEMENT:
      {
        MapElement mapElement = (MapElement)theEObject;
        T result = caseMapElement(mapElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.TUPLE_PART:
      {
        TuplePart tuplePart = (TuplePart)theEObject;
        T result = caseTuplePart(tuplePart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.PRIMITIVE_EXP:
      {
        PrimitiveExp primitiveExp = (PrimitiveExp)theEObject;
        T result = casePrimitiveExp(primitiveExp);
        if (result == null) result = caseOclLExpression(primitiveExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.NUMBER_LITERAL_EXP:
      {
        NumberLiteralExp numberLiteralExp = (NumberLiteralExp)theEObject;
        T result = caseNumberLiteralExp(numberLiteralExp);
        if (result == null) result = casePrimitiveExp(numberLiteralExp);
        if (result == null) result = caseOclLExpression(numberLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.STRING_LITERAL_EXP:
      {
        StringLiteralExp stringLiteralExp = (StringLiteralExp)theEObject;
        T result = caseStringLiteralExp(stringLiteralExp);
        if (result == null) result = casePrimitiveExp(stringLiteralExp);
        if (result == null) result = caseOclLExpression(stringLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.BOOLEAN_LITERAL_EXP:
      {
        BooleanLiteralExp booleanLiteralExp = (BooleanLiteralExp)theEObject;
        T result = caseBooleanLiteralExp(booleanLiteralExp);
        if (result == null) result = casePrimitiveExp(booleanLiteralExp);
        if (result == null) result = caseOclLExpression(booleanLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.UNLIMITED_NATURAL_LITERAL_EXP:
      {
        UnlimitedNaturalLiteralExp unlimitedNaturalLiteralExp = (UnlimitedNaturalLiteralExp)theEObject;
        T result = caseUnlimitedNaturalLiteralExp(unlimitedNaturalLiteralExp);
        if (result == null) result = casePrimitiveExp(unlimitedNaturalLiteralExp);
        if (result == null) result = caseOclLExpression(unlimitedNaturalLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.INVALID_LITERAL_EXP:
      {
        InvalidLiteralExp invalidLiteralExp = (InvalidLiteralExp)theEObject;
        T result = caseInvalidLiteralExp(invalidLiteralExp);
        if (result == null) result = casePrimitiveExp(invalidLiteralExp);
        if (result == null) result = caseOclLExpression(invalidLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.NULL_LITERAL_EXP:
      {
        NullLiteralExp nullLiteralExp = (NullLiteralExp)theEObject;
        T result = caseNullLiteralExp(nullLiteralExp);
        if (result == null) result = casePrimitiveExp(nullLiteralExp);
        if (result == null) result = caseOclLExpression(nullLiteralExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.IF_EXP:
      {
        IfExp ifExp = (IfExp)theEObject;
        T result = caseIfExp(ifExp);
        if (result == null) result = caseOclLExpression(ifExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.OCL_LTYPE:
      {
        OclLType oclLType = (OclLType)theEObject;
        T result = caseOclLType(oclLType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.OCL_LMODEL_ELEMENT_EXP:
      {
        OclLModelElementExp oclLModelElementExp = (OclLModelElementExp)theEObject;
        T result = caseOclLModelElementExp(oclLModelElementExp);
        if (result == null) result = caseOclLType(oclLModelElementExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.ENV_TYPE:
      {
        EnvType envType = (EnvType)theEObject;
        T result = caseEnvType(envType);
        if (result == null) result = caseOclLType(envType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.LAMBDA_TYPE:
      {
        LambdaType lambdaType = (LambdaType)theEObject;
        T result = caseLambdaType(lambdaType);
        if (result == null) result = caseOclLType(lambdaType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.MAP_TYPE:
      {
        MapType mapType = (MapType)theEObject;
        T result = caseMapType(mapType);
        if (result == null) result = caseOclLType(mapType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.TUPLE_TYPE:
      {
        TupleType tupleType = (TupleType)theEObject;
        T result = caseTupleType(tupleType);
        if (result == null) result = caseOclLType(tupleType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.OCL_LANY_TYPE:
      {
        OclLAnyType oclLAnyType = (OclLAnyType)theEObject;
        T result = caseOclLAnyType(oclLAnyType);
        if (result == null) result = caseOclLType(oclLAnyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.SET_TYPE:
      {
        SetType setType = (SetType)theEObject;
        T result = caseSetType(setType);
        if (result == null) result = caseOclLType(setType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.SEQUENCE_TYPE:
      {
        SequenceType sequenceType = (SequenceType)theEObject;
        T result = caseSequenceType(sequenceType);
        if (result == null) result = caseOclLType(sequenceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.ORDERED_SET_TYPE:
      {
        OrderedSetType orderedSetType = (OrderedSetType)theEObject;
        T result = caseOrderedSetType(orderedSetType);
        if (result == null) result = caseOclLType(orderedSetType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.BAG_TYPE:
      {
        BagType bagType = (BagType)theEObject;
        T result = caseBagType(bagType);
        if (result == null) result = caseOclLType(bagType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.REAL_TYPE:
      {
        RealType realType = (RealType)theEObject;
        T result = caseRealType(realType);
        if (result == null) result = caseOclLType(realType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.INTEGER_TYPE:
      {
        IntegerType integerType = (IntegerType)theEObject;
        T result = caseIntegerType(integerType);
        if (result == null) result = caseOclLType(integerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.BOOLEAN_TYPE:
      {
        BooleanType booleanType = (BooleanType)theEObject;
        T result = caseBooleanType(booleanType);
        if (result == null) result = caseOclLType(booleanType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.STRING_TYPE:
      {
        StringType stringType = (StringType)theEObject;
        T result = caseStringType(stringType);
        if (result == null) result = caseOclLType(stringType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.BOOL_OP_CALL_EXP:
      {
        BoolOpCallExp boolOpCallExp = (BoolOpCallExp)theEObject;
        T result = caseBoolOpCallExp(boolOpCallExp);
        if (result == null) result = caseOclLExpression(boolOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.EQ_OP_CALL_EXP:
      {
        EqOpCallExp eqOpCallExp = (EqOpCallExp)theEObject;
        T result = caseEqOpCallExp(eqOpCallExp);
        if (result == null) result = caseOclLExpression(eqOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.COM_OP_CALL_EXP:
      {
        ComOpCallExp comOpCallExp = (ComOpCallExp)theEObject;
        T result = caseComOpCallExp(comOpCallExp);
        if (result == null) result = caseOclLExpression(comOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.ADD_OP_CALL_EXP:
      {
        AddOpCallExp addOpCallExp = (AddOpCallExp)theEObject;
        T result = caseAddOpCallExp(addOpCallExp);
        if (result == null) result = caseOclLExpression(addOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.MUL_OP_CALL_EXP:
      {
        MulOpCallExp mulOpCallExp = (MulOpCallExp)theEObject;
        T result = caseMulOpCallExp(mulOpCallExp);
        if (result == null) result = caseOclLExpression(mulOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.NAVIGATION_EXP:
      {
        NavigationExp navigationExp = (NavigationExp)theEObject;
        T result = caseNavigationExp(navigationExp);
        if (result == null) result = caseOclLExpression(navigationExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.COLLECTION_OP_CALL_EXP:
      {
        CollectionOpCallExp collectionOpCallExp = (CollectionOpCallExp)theEObject;
        T result = caseCollectionOpCallExp(collectionOpCallExp);
        if (result == null) result = caseOclLExpression(collectionOpCallExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.ITERATE_EXP:
      {
        IterateExp iterateExp = (IterateExp)theEObject;
        T result = caseIterateExp(iterateExp);
        if (result == null) result = caseOclLExpression(iterateExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.ITERATOR_EXP:
      {
        IteratorExp iteratorExp = (IteratorExp)theEObject;
        T result = caseIteratorExp(iteratorExp);
        if (result == null) result = caseOclLExpression(iteratorExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.NAVIGATION_OR_ATTRIBUTE_CALL:
      {
        NavigationOrAttributeCall navigationOrAttributeCall = (NavigationOrAttributeCall)theEObject;
        T result = caseNavigationOrAttributeCall(navigationOrAttributeCall);
        if (result == null) result = caseOclLExpression(navigationOrAttributeCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.OPERATION_CALL:
      {
        OperationCall operationCall = (OperationCall)theEObject;
        T result = caseOperationCall(operationCall);
        if (result == null) result = caseOclLExpression(operationCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.LAMBDA_EXP:
      {
        LambdaExp lambdaExp = (LambdaExp)theEObject;
        T result = caseLambdaExp(lambdaExp);
        if (result == null) result = caseOclLExpression(lambdaExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.TUPLE_EXP:
      {
        TupleExp tupleExp = (TupleExp)theEObject;
        T result = caseTupleExp(tupleExp);
        if (result == null) result = caseOclLExpression(tupleExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.ELSE_IF_THEN_EXP:
      {
        ElseIfThenExp elseIfThenExp = (ElseIfThenExp)theEObject;
        T result = caseElseIfThenExp(elseIfThenExp);
        if (result == null) result = caseOclLExpression(elseIfThenExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.SELF_EXP:
      {
        SelfExp selfExp = (SelfExp)theEObject;
        T result = caseSelfExp(selfExp);
        if (result == null) result = caseOclLExpression(selfExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case OCLlitePackage.NESTED_EXP:
      {
        NestedExp nestedExp = (NestedExp)theEObject;
        T result = caseNestedExp(nestedExp);
        if (result == null) result = caseOclLExpression(nestedExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl LModel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl LModel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclLModel(OclLModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>URI </em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>URI </em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseURI_(URI_ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModuleElement(ModuleElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuery(Query object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl LExpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl LExpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclLExpression(OclLExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIterator(Iterator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalVariable(LocalVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionExp(CollectionExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagExp(BagExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceExp(SequenceExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetExp(SetExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Set Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Set Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedSetExp(OrderedSetExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapExp(MapExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapElement(MapElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTuplePart(TuplePart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveExp(PrimitiveExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberLiteralExp(NumberLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteralExp(StringLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteralExp(BooleanLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unlimited Natural Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unlimited Natural Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnlimitedNaturalLiteralExp(UnlimitedNaturalLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invalid Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invalid Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvalidLiteralExp(InvalidLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Literal Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Literal Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullLiteralExp(NullLiteralExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExp(IfExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl LType</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl LType</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclLType(OclLType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl LModel Element Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl LModel Element Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclLModelElementExp(OclLModelElementExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Env Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Env Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnvType(EnvType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lambda Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lambda Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLambdaType(LambdaType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapType(MapType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleType(TupleType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ocl LAny Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ocl LAny Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOclLAnyType(OclLAnyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetType(SetType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceType(SequenceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Set Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Set Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedSetType(OrderedSetType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagType(BagType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealType(RealType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerType(IntegerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanType(BooleanType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringType(StringType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolOpCallExp(BoolOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Eq Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Eq Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqOpCallExp(EqOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Com Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Com Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComOpCallExp(ComOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddOpCallExp(AddOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulOpCallExp(MulOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigation Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigation Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigationExp(NavigationExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Op Call Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Op Call Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionOpCallExp(CollectionOpCallExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterate Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterate Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIterateExp(IterateExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterator Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterator Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIteratorExp(IteratorExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Navigation Or Attribute Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Navigation Or Attribute Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNavigationOrAttributeCall(NavigationOrAttributeCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationCall(OperationCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Lambda Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Lambda Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLambdaExp(LambdaExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleExp(TupleExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Else If Then Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Else If Then Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElseIfThenExp(ElseIfThenExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Self Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Self Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelfExp(SelfExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nested Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nested Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNestedExp(NestedExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //OCLliteSwitch
